//704. Bulb Switcher II
//Analysis case by case
//step m = 1           2                  3                   4   ...
//n = 1        2          2                  2                   2
//n = 2        3          4                  4                   4
//n >= 3       4          7                  8                   8         always 8

class Solution {
public:
	/**
	 * @param n: number of lights
	 * @param m: number of operations
	 * @return: the number of status
	 */
	int flipLights(int n, int m) {
		// write your code here
		//  define  1. all  2.even 3.odd 4.3k+1

		//   1.   [111][111][111][111] -> 1. [000][000][000][000] -> 1. [111][111][111][111]
		//                                                           2. [010][101][010][101]
		//                                                           3. [101][010][101][010]
		//                                                           4. [001][001][001][001]

		//                                2. [101][010][101][010] -> 1. [010][101][010][101] x
		//                                                           2. [111][111][111][111] x
		//                                                           3. [000][000][000][000]
		//                                                           4. [100][011][100][011]

		//                                3. [010][101][010][101] -> 1. [101][010][101][010] x
		//                                                           2. [000][000][000][000] x
		//                                                           3. [111][111][111][111] x
		//                                                           4. [011][100][011][100]

		//                                4. [110][110][110][110] -> 1. [001][001][001][001] x
		//                                                           2. [100][011][100][011] x
		//                                                           3. [011][100][011][100] x
		//                                                           4. [111][111][111][111] x


		//   2.   [010][101][010][101] -> 1. [101][010][101][010] x
		//                                2. [000][000][000][000] x
		//                                3. [111][111][111][111]
		//                                4. [011][100][011][100] -> 1.[100][011][100][011] x
		//                                                           2.[001][001][001][001] x
		//                                                           3.[110][110][110][110]
		//                                                           4.[010][101][010][101] x



		//   3.   [101][010][101][010] -> 1. [010][101][010][101] x
		//                                2. [111][111][111][111] x
		//                                3. [000][000][000][000] x
		//                                4. [100][011][100][011] -> 1.[011][100][011][100] x
		//                                                           2.[001][001][001][001] x
		//                                                           3.[110][110][110][110] x
		//                                                           4.[101][010][101][010] x




		//   4.   [100][100][100][100] -> 1. [110][110][110][110] x
		//                                2. [011][100][011][100] x
		//                                3. [100][011][100][011] x
		//                                4. [000][000][000][000] x

		//   if n >= 4
		//           m=1 res=4             m=2  res=7                    m=3 res=8                 m>=4 res=8

		//      n == 3   
		//               res=4                  res=7                        res=8                        8

		//      n == 2   res=3                  res=4                        res=4                        4
		//      n == 1       2                      2                            2                        2
		if (m == 0) return 1;
		if (n == 1) return 2;
		if (n == 2 && m == 1) return 3;
		if (n == 2 && m > 1) return 4;
		if (m == 1) return 4;
		if (m <= 2) return 7;
		return 8;
	}
};